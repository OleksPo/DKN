---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: db
spec:
  selector:
    app: db
  ports:
     - port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: webappdb
  labels:
    app: db
spec:
  selector:
    app: db
  ports:
     - port: 5432
---
apiVersion: v1
kind: ConfigMap
data:
  DBHOST: "webappdb"
metadata:
  name: webapp-configmap
---
apiVersion: v1
kind: Secret
metadata:
  name: webapp-secret
stringData:
  DBUSER: "NEWDBUSER"
  DBPASS: "NEWDBPASS"
  DBNAME: "NEWDBNAME"
---
apiVersion: v1
kind: Service
metadata:
  name: webapp
  labels:
    app: webapp
spec:
  selector:
    app: webapp
    rollout: webapp_old
  type: NodePort
  ports:
     - port: 80
       nodePort: 32021
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
   app: db
  name: db
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: vovolkov/db
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: webapp-secret
              key: DBUSER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: webapp-secret
              key: DBPASS
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: webapp-secret
              key: DBNAME
        volumeMounts:
          - mountPath: /var/lib/postgresql/data/
            name: db-volume
      volumes:
      - name: db-volume
        emptyDir: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
  name: webapp
spec:
  rules:
  - host: web.app
    http:
      paths:
      - backend:
          serviceName: webapp
          servicePort: 80
        path: /student00
        #pathType: Perfix
      - backend:
          serviceName: webapp
          servicePort: 80
        path: /student00(/|$)(.*)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
   app: webapp
  name: webapp
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2        # how many pods we can add at a time
      maxUnavailable: 0
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - webapp
              topologyKey: kubernetes.io/hostname
            weight: 100
      initContainers:
      - name: pingdb
        envFrom:
        - secretRef:
            name: webapp-secret
        - configMapRef:
            name: webapp-configmap
        image: vovolkov/webapp:fix
        command: ["python3","-u","/app/pingdb.py"]
      containers:
      - name: webapp
        image: vovolkov/webapp:fix
        ports:
        - containerPort: 80
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: webapp-configmap
        - secretRef:
            name: webapp-secret
